extend type Query {
    system: System!
    history: [SystemMetricsHistoryEntry!]!
    historyBetweenDates(from: OffsetDateTime!, to: OffsetDateTime!): [SystemMetricsHistoryEntry!]!
}

type System {
    operatingSystem: OperatingSystem!
    uptime: Long!
    baseboard: Board!
    usbDevices: [UsbDevices!]!
    processor: Processor!
    drives: [Drive!]! @deprecated(reason: "replaced by disks and fileSystems")
    disks: [Disk!]!
    diskById(id: String!): Disk
    fileSystems: [FileSystem!]!
    fileSystemById(id: String!): FileSystem
    hostname: String!
    platform: Platform!
    connectivity: Connectivity!
    networkInterfaces: [NetworkInterface!]!
    networkInterfaceById(id: String!): NetworkInterface
    # 0 means no limitation
    processes(limit: Int = 0, sortBy: ProcessSortMethod = MEMORY): [Process!]!
    memory: Memory!
}

enum Platform {
    MACOS,
    LINUX,
    WINDOWS,
    SOLARIS,
    FREEBSD,
    OPENBSD,
    WINDOWSCE,
    AIX,
    ANDROID,
    GNU,
    KFREEBSD,
    NETBSD,
    UNKNOWN
}

type SystemMetricsHistoryEntry {
    date: String!
    dateTime: OffsetDateTime!
    processorMetrics: ProcessorMetrics!
    driveMetrics: [DriveMetrics!]! @deprecated(reason: "Replaced by DiskMetrics and FileSystemMetrics")
    diskMetrics: [DiskMetrics!]!
    fileSystemMetrics: [FileSystemMetrics!]!
    networkInterfaceMetrics: [NetworkInterfaceMetrics!]!
    connectivity: Connectivity!
    memoryMetrics: MemoryMetrics!
}

type OperatingSystem {
    manufacturer: String!
    family: String!
    versionInfo: OperatingSystemVersion!
}

type OperatingSystemVersion {
    version: String!
    codeName: String!
    buildNumber: String!
}

# System

type UsbDevices {
    name: String!
    vendor: String!
    vendorId: String!
    productId: String!
    serialNumber: String!
    connectedDevices: [String!]!
}

type Board {
    manufacturer: String!
    model: String!
    serialNumber: String!
    firmware: BoardFirmware!
}

type BoardFirmware {
    manufacturer: String!
    name: String!
    description: String!
    version: String!
    releaseDate: String!
}

## Processor

type Processor {
    logicalProcessorCount: Int!
    physicalProcessorCount: Int!
    name: String!
    identifier: String!
    family: String!
    vendor: String!
    vendorFreq: Int!
    model: String!
    stepping: String!
    cpu64bit: Boolean!
    metrics: ProcessorMetrics!
}

type ProcessorMetrics {
    usagePercentage: Float!
    @deprecated(reason: "Replaced by much more detailed loadAverages field")
    systemLoadAverage: Float!
    loadAverages: LoadAverages!
    processCount: Int!
    threadCount: Int!
    voltage: Int!
    fanRpm: Int!
    fanPercent: Int!
    temperatures: [Float!]!
    coreLoads: [ProcessorCoreMetrics!]!
}

type LoadAverages {
    oneMinute: Float!
    fiveMinutes: Float!
    fifteenMinutes: Float!
}

type ProcessorCoreMetrics {
    percentage: Float!
}

## Drives

type Drive {
    model: String!
    name: String!
    serial: String!
    sizeBytes: Long!
    diskOsPartition: DiskOsPartition!
    partitions: [Partition!]!
    metrics: DriveMetrics
}

type Disk {
    model: String!
    name: String!
    serial: String!
    sizeBytes: Long!
    partitions: [Partition!]!
    metrics: DiskMetrics
}

type FileSystem{
    name: String!
    id: String!
    description: String!
    label: String!
    type: String!
    volume: String!
    mount: String!
    metrics: FileSystemMetrics!
}

type FileSystemMetrics {
    name: String!
    id: String!
    freeSpaceBytes: Long!
    usableSpaceBytes: Long!
    totalSpaceBytes: Long!
}

type DiskOsPartition {
    identification: String!
    name: String!
    type: String!
    uuid: UUID!
    sizeBytes: Long!
    major: Int!
    minor: Int!
    mountPoint: String!
    volume: String!
    logicalVolume: String!
    mount: String!
    description: String!
    usableSpace: Int!
    totalSpace: Int!
}

type Partition {
    identification: String!
    name: String!
    type: String!
    uuid: String!
    sizeBytes: Long!
    major: Int!
    minor: Int!
    mountPoint: String!
}

type DriveMetrics {
    name: String!
    temperature: Int!
    healthData: [DriveHealth!]!
    usableSpaceBytes: Long!
    totalSpaceBytes: Long!
    openFileDescriptors: Int!
    maxFileDescriptors: Int!
    reads: Int!
    readBytes: Long!
    writes: Int!
    writeBytes: Long!
    currentReadWriteRate: DriveReadWriteRate!
}

type DiskMetrics {
    name: String!
    reads: Int!
    readBytes: Long!
    writes: Int!
    writeBytes: Long!
    currentReadWriteRate: DiskReadWriteRate!
}

type DriveHealth {
    value: Float!
    type: DriveHealthDataType!
}

enum DriveHealthDataType {
    CLOCK,
    VOLTAGE,
    PERCENT,
    RPM,
    CELCIUS,
    GIGABYTE
}


type DriveReadWriteRate {
    readBytesPerSecond: Long!
    writeBytesPerSecond: Long!
}

type DiskReadWriteRate {
    readBytesPerSecond: Long!
    writeBytesPerSecond: Long!
}

## Network interface

type Connectivity {
    externalIp: String
    previousExternalIp: String
    localIp: String
    connected: Boolean!
}

type NetworkInterface {
    name: String!
    displayName: String!
    mac: String!
    speed: Long!
    mtu: Int!
    loopback: Boolean!
    ipv6: [String!]!
    ipv4: [String!]!
    metrics: NetworkInterfaceMetrics
}

type NetworkInterfaceMetrics {
    name: String!
    bytesReceived: Long!
    bytesSent: Long!
    packetsReceived: Int!
    packetsSent: Int!
    inErrors: Int!
    outErrors: Int!
    up: Boolean!
    readWriteRate: NetworkInterfaceReadWriteRate!
}

type NetworkInterfaceReadWriteRate {
    receiveBytesPerSecond: Long!
    sendBytesPerSecond: Long!
}

# Processes

type Process {
    name: String!
    path: String!
    commandLine: String!
    user: String!
    userID: String!
    group: String!
    groupID: String!
    state: String!
    processID: Int!
    parentProcessID: Int!
    threadCount: Int!
    priority: Int!
    virtualSize: Int!
    residentSetSize: Long!
    memoryPercent: Float!
    kernelTime: Long!
    userTime: Long!
    upTime: Long!
    cpuPercent: Float!
    startTime: Long!
    bytesRead: Long!
    bytesWritten: Long!
}

enum ProcessSortMethod {
    CPU,
    MEMORY,
    OLDEST,
    NEWEST,
    PID,
    PARENTPID,
    NAME
}

# Memory

type Memory {
    swapTotalBytes: Long!
    totalBytes: Long!
    physicalMemory: [PhysicalMemory!]!
    metrics: MemoryMetrics
}

type MemoryMetrics {
    numberOfProcesses: Int!
    swapUsedBytes: Long!
    availableBytes: Long!
    usedPercent: Float!
}

type PhysicalMemory {
    bankLabel: String!
    capacityBytes: Long!
    clockSpeedHertz: Long!
    manufacturer: String!
    memoryType: String!
}