scalar UUID
scalar OffsetDateTime
scalar Long

schema {
    query: Query
    mutation: Mutation
}

type Query {
    system: System!
    history: [SystemMetricsHistoryEntry!]!
    monitors: [Monitor!]!
    events: [Event!]!
    pastEvents: [PastEvent!]!
    ongoingEvents: [OngoingEvent!]!
    docker: Docker!
    meta: Meta
}

type Meta {
    version: String!
    processId: Int!
}

type Mutation {
    createNumericalValueMonitor(input: CreateNumericalMonitorInput) : CreateMonitorOutput
    createConditionalValueMonitor(input: CreateConditionalMonitorInput) : CreateMonitorOutput
    createFractionalValueMonitor(input: CreateFractionMonitorInput) : CreateMonitorOutput
    deleteMonitor(input: DeleteMonitorInput) : DeleteMonitorOutput
    updateNumericalValueMonitor(input: UpdateNumericalValueMonitorInput) : UpdateMonitorOutput
    updateFractionalValueMonitor(input: UpdateFractionalValueMonitorInput) : UpdateMonitorOutput
    updateConditionalValueMonitor(input: UpdateConditionalValueMonitorInput) : UpdateMonitorOutput
    deleteEvent(input: DeleteEventInput) : DeleteEventOutput
    deleteEventsForMonitor(input: DeleteEventsForMonitorInput) : DeleteEventOutput
    performDockerContainerCommand(input: PerformDockerContainerCommandInput) : PerformDockerContainerCommandOutput
}

input CreateNumericalMonitorInput {
    inertiaInSeconds: Int!
    type: MonitorType!
    threshold: Long!
    # Drives: serial or name (ignoring case)
    # NIC's: name or MAC address (ignoring case)
    # Process: process ID
    # Docker: full container ID (ignoring case)
    monitoredItemId: String
}

input CreateFractionMonitorInput {
    inertiaInSeconds: Int!
    type: MonitorType!
    threshold: Float!
    # Drives: serial or name (ignoring case)
    # NIC's: name or MAC address (ignoring case)
    # Process: process ID
    # Docker: full container ID (ignoring case)
    monitoredItemId: String
}

input CreateConditionalMonitorInput {
    inertiaInSeconds: Int!
    type: MonitorType!
    threshold: Boolean!
    # Drives: serial or name (ignoring case)
    # NIC's: name or MAC address (ignoring case)
    # Process: process ID
    # Docker: full container ID (ignoring case)
    monitoredItemId: String
}

enum NumericalValueMonitorType {
    CPU_TEMP,
    DRIVE_SPACE,
    DRIVE_READ_RATE,
    DRIVE_WRITE_RATE,
    MEMORY_SPACE,
    NETWORK_UPLOAD_RATE,
    NETWORK_DOWNLOAD_RATE,
    PROCESS_MEMORY_SPACE,
}

enum FractionalValueMonitorType {
    CPU_LOAD,
    PROCESS_CPU_LOAD,
}

enum ConditionalValueMonitorType {
    NETWORK_UP,
    CONTAINER_RUNNING,
    PROCESS_EXISTS,
    CONNECTIVITY,
    EXTERNAL_IP_CHANGED
}

input UpdateNumericalValueMonitorInput {
    monitorId: UUID!
    inertiaInSeconds: Int
    threshold: Long
}

input UpdateFractionalValueMonitorInput {
    monitorId: UUID!
    inertiaInSeconds: Int
    threshold: Float
}

input UpdateConditionalValueMonitorInput {
    monitorId: UUID!
    inertiaInSeconds: Int
    threshold: Boolean
}

type CreateMonitorOutput {
    monitorId: UUID!
}

union UpdateMonitorOutput = UpdateMonitorOutputSucceeded | UpdateMonitorOutputFailed

type UpdateMonitorOutputSucceeded {
    monitorId: UUID!
}

type UpdateMonitorOutputFailed {
    reason: String!
}

input DeleteMonitorInput {
    monitorId: UUID!
}

type DeleteMonitorOutput {
    removed: Boolean!
}

input DeleteEventInput {
    eventId: UUID!
}

input DeleteEventsForMonitorInput {
    monitorId: UUID!
}

type DeleteEventOutput {
    removed: Boolean!
}

input PerformDockerContainerCommandInput{
    containerId: String!
    command: ContainerCommand
}

type PerformDockerContainerCommandOutputFailed {
    reason: String!
}

type PerformDockerContainerCommandOutputSucceeded {
    containerId: String!
}

union PerformDockerContainerCommandOutput = PerformDockerContainerCommandOutputSucceeded | PerformDockerContainerCommandOutputFailed

type ReadLogsForContainerOutputFailed {
    reason: String!
}

type ReadLogsForContainerOutputSucceeded {
    lines: [String!]!
}

union ReadLogsForContainerOutput = ReadLogsForContainerOutputSucceeded | ReadLogsForContainerOutputFailed

# Root node
type System {
    operatingSystem: OperatingSystem!
    uptime: Int!
    baseboard: Board!
    usbDevices: [UsbDevices!]!
    processor: Processor!
    drives: [Drive!]!
    hostname: String!
    platform: Platform!
    connectivity: Connectivity!
    networkInterfaces: [NetworkInterface!]!
    # 0 means no limitation
    processes(limit: Int = 0, sortBy: ProcessSortMethod = MEMORY): [Process!]!
    memory: Memory!
}

## History

type SystemMetricsHistoryEntry {
    date: String!
    processorMetrics: ProcessorMetrics!
    driveMetrics: [DriveMetrics!]!
    networkInterfaceMetrics: [NetworkInterfaceMetrics!]!
    connectivity: Connectivity!
    memoryMetrics: MemoryMetrics!
}

## Monitoring

union MonitoredValue = NumericalValue | FractionalValue | ConditionalValue

type NumericalValue {
    number: Long
}

type FractionalValue {
    fraction: Float
}

type ConditionalValue {
    condition: Boolean
}

type MonitoredValueHistoryEntry {
    date: String!
    value: MonitoredValue!
}

type Monitor {
    id: UUID!
    inertiaInSeconds: Int!
    type: MonitorType
    threshold: MonitoredValue!
    currentValue: MonitoredValue!
    monitoredItemId: String
    history: [MonitoredValueHistoryEntry!]!
}

enum MonitorType {
    CPU_LOAD,
    CPU_TEMP,
    DRIVE_SPACE,
    DRIVE_READ_RATE,
    DRIVE_WRITE_RATE,
    MEMORY_SPACE,
    NETWORK_UP,
    NETWORK_UPLOAD_RATE,
    NETWORK_DOWNLOAD_RATE,
    CONTAINER_RUNNING,
    PROCESS_MEMORY_SPACE,
    PROCESS_CPU_LOAD,
    PROCESS_EXISTS,
    CONNECTIVITY,
    EXTERNAL_IP_CHANGED
}

interface Event {
    id: UUID!
    monitor: Monitor!
    startTime: String!
}

type OngoingEvent implements Event {
    id: UUID!
    monitor: Monitor!
    startTime: String!
    startValue: MonitoredValue!
}

type PastEvent implements Event {
    id: UUID!
    monitor: Monitor!
    startTime: String!
    endTime: String!
    endValue: MonitoredValue!
}

## Operating system

type OperatingSystem {
    manufacturer: String!
    family: String!
    versionInfo: OperatingSystemVersion!
}

type OperatingSystemVersion {
    version: String!
    codeName: String!
    buildNumber: String!
}

# System

type UsbDevices {
    name: String!
    vendor: String!
    vendorId: String!
    productId: String!
    serialNumber: String!
    connectedDevices: [String!]!
}

type Board {
    manufacturer: String!
    model: String!
    serialNumber: String!
    firmware: BoardFirmware!
}

type BoardFirmware {
    manufacturer: String!
    name: String!
    description: String!
    version: String!
    releaseDate: String!
}

## Processor

type Processor {
    logicalProcessorCount: Int!
    physicalProcessorCount: Int!
    name: String!
    identifier: String!
    family: String!
    vendor: String!
    vendorFreq: Int!
    model: String!
    stepping: String!
    cpu64bit: Boolean!
    metrics: ProcessorMetrics!
}

type ProcessorMetrics {
    usagePercentage: Float!
    systemLoadAverage: Float!
    processCount: Int!
    threadCount: Int!
    voltage: Int!
    fanRpm: Int!
    fanPercent: Int!
    temperatures: [Float!]!
    coreLoads: [ProcessorCoreMetrics!]!
}

type ProcessorCoreMetrics {
    percentage: Float!
}

## Drives

type Drive {
    model: String!
    name: String!
    serial: String!
    sizeBytes: Long!
    diskOsPartition: DiskOsPartition!
    partitions: [Partition!]!
    metrics: DriveMetrics
}

type DiskOsPartition {
    identification: String!
    name: String!
    type: String!
    uuid: UUID!
    sizeBytes: Long!
    major: Int!
    minor: Int!
    mountPoint: String!
    volume: String!
    logicalVolume: String!
    mount: String!
    description: String!
    usableSpace: Int!
    totalSpace: Int!
}

type Partition {
    identification: String!
    name: String!
    type: String!
    uuid: String!
    sizeBytes: Long!
    major: Int!
    minor: Int!
    mountPoint: String!
}

type DriveMetrics {
    name: String!
    temperature: Int!
    healthData: [DriveHealth!]!
    usableSpaceBytes: Long!
    totalSpaceBytes: Long!
    openFileDescriptors: Int!
    maxFileDescriptors: Int!
    reads: Int!
    readBytes: Long!
    writes: Int!
    writeBytes: Long!
    currentReadWriteRate: DriveReadWriteRate!
}

type DriveHealth{
    value: Float!
    type: DriveHealthDataType!
}

enum DriveHealthDataType {
    CLOCK,
    VOLTAGE,
    PERCENT,
    RPM,
    CELCIUS,
    GIGABYTE
}


type DriveReadWriteRate {
    readBytesPerSecond: Long!
    writeBytesPerSecond: Long!
}

## Network interface

type Connectivity{
    externalIp: String
    previousExternalIp: String
    connected: Boolean!
}

type NetworkInterface {
    name: String!
    displayName: String!
    mac: String!
    speed: Int!
    mtu: Int!
    loopback: Boolean!
    ipv6: [String!]!
    ipv4: [String!]!
    metrics: NetworkInterfaceMetrics
}

type NetworkInterfaceMetrics {
    name: String!
    bytesReceived: Long!
    bytesSent: Long!
    packetsReceived: Int!
    packetsSent: Int!
    inErrors: Int!
    outErrors: Int!
    up: Boolean!
    readWriteRate: NetworkInterfaceReadWriteRate!
}

type NetworkInterfaceReadWriteRate {
    receiveBytesPerSecond: Long!
    sendBytesPerSecond: Long!
}

# Processes

type Process {
    name: String!
    path: String!
    commandLine: String!
    user: String!
    userID: String!
    group: String!
    groupID: String!
    state: String!
    processID: Int!
    parentProcessID: Int!
    threadCount: Int!
    priority: Int!
    virtualSize: Int!
    residentSetSize: Long!
    memoryPercent: Float!
    kernelTime: Int!
    userTime: Int!
    upTime: Int!
    cpuPercent: Float!
    startTime: Long!
    bytesRead: Long!
    bytesWritten: Long!
}

enum ProcessSortMethod{
    CPU,
    MEMORY,
    OLDEST,
    NEWEST,
    PID,
    PARENTPID,
    NAME
}

# Memory

type Memory {
    swapTotalBytes: Long!
    totalBytes: Long!
    physicalMemory: [PhysicalMemory!]!
    metrics: MemoryMetrics
}

type MemoryMetrics {
    numberOfProcesses: Int!
    swapUsedBytes: Long!
    availableBytes: Long!
    usedPercent: Float!
}

type PhysicalMemory {
    bankLabel: String!
    capacityBytes: Long!
    clockSpeedHertz: Long!
    manufacturer: String!
    memoryType: String!
}

enum Platform {
    MACOS,
    LINUX,
    WINDOWS,
    SOLARIS,
    FREEBSD,
    OPENBSD,
    WINDOWSCE,
    AIX,
    ANDROID,
    GNU,
    KFREEBSD,
    NETBSD,
    UNKNOWN
}

# Docker

union Docker = DockerAvailable | DockerUnavailable

type DockerAvailable{
    containers: [DockerContainer!]!
    runningContainers: [DockerContainer!]!
    readLogsForContainer(containerId: String!, from: OffsetDateTime, to: OffsetDateTime): ReadLogsForContainerOutput
}

type DockerUnavailable{
    reason: String!
    isDisabled: Boolean
}

enum DockerContainerState {
    CREATED,
    RESTARTING,
    RUNNING,
    PAUSED,
    EXITED,
    DEAD,
    UNKNOWN
}

type DockerContainer {
    command: String!
    created: Long!
    hostConfig: DockerHostConfig!
    config: DockerConfig!
    id: String!
    image: String!
    imageID: String!
    mounts: [DockerMount!]!
    names: [String!]!
    networkSettings: [DockerNetworkSetting!]!
    ports: [DockerPort!]!
    state: DockerContainerState!
    health: DockerContainerHealth
    status: String!
}

type DockerContainerHealth{
    status: String,
    failingStreak: Int,
    logEntries: [DockerHealthLogEntry!]!
}

type DockerHealthLogEntry{
    start: String!
    end: String!
    output: String!
    exitCode: Long!
}

type DockerConfig{
    env: [String!]!
    volumeBindings: [DockerVolumeBinding!]!
    cmd: [String!]!
    exposedPorts: [DockerPortConfig!]!
}

type DockerPortConfig{
    port: Int!
    portProtocol: DockerPortProtocol!
}

type DockerVolumeBinding{
    hostPath: String!
    containerPath: String!
}

enum DockerPortProtocol {
    UDP,
    TCP,
    SCTP
}

type DockerNetworkSetting {
    name: String!
    network: DockerNetwork!
}

type DockerPort {
    ip: String!
    privatePort: Int!
    publicPort: Int!
    type: String!
}

type DockerNetwork {
    aliases: [String!]!
    endpointID: String!
    gateway: String!
    globalIPv6Address: String!
    globalIPv6PrefixLen: Int!
    iPAMConfig: DockerIpam!
    iPAddress: String!
    iPPrefixLen: Int!
    iPv6Gateway: String!
    links: [DockerLink!]!
    macAddress: String!
    networkID: String!
}

type DockerLink {
    name: String!,
    alias: String!
}

type DockerIpam {
    ipv4Address: String
    ipv6Address: String
}

type DockerMount {
    destination: String!,
    driver: String!,
    mode: String!,
    name: String!,
    propagation: String!,
    rw: Boolean!,
    source: String!
}

type DockerHostConfig {
    networkMode: String!
}

enum ContainerCommand {
    START,
    STOP,
    RESTART,
    PAUSE,
    UNPAUSE,
}