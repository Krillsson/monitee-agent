extend type Query {
    docker: Docker!
}

extend type Mutation {
    performDockerContainerCommand(input: PerformDockerContainerCommandInput) : PerformDockerContainerCommandOutput
}

input PerformDockerContainerCommandInput{
    containerId: String!
    command: ContainerCommand
}

type PerformDockerContainerCommandOutputFailed {
    reason: String!
}

type PerformDockerContainerCommandOutputSucceeded {
    containerId: String!
}

union PerformDockerContainerCommandOutput = PerformDockerContainerCommandOutputSucceeded | PerformDockerContainerCommandOutputFailed

type ReadLogsForContainerOutputFailed {
    reason: String!
}

type ReadLogsForContainerOutputSucceeded {
    lines: [String!]!
}

union ReadLogsForContainerOutput = ReadLogsForContainerOutputSucceeded | ReadLogsForContainerOutputFailed

union Docker = DockerAvailable | DockerUnavailable

type DockerAvailable {
    container(id: String!): DockerContainer
    containers: [DockerContainer!]!
    runningContainers: [DockerContainer!]!
    readLogsForContainer(containerId: String!, from: OffsetDateTime, to: OffsetDateTime): ReadLogsForContainerOutput @deprecated(reason: "Replaced by readLogsForContainerBetweenTimestamps")
    readLogsForContainerBetweenTimestamps(containerId: String!, from: Instant, to: Instant): ReadLogsForContainerOutput
    metricsForContainer(containerId: String!): DockerContainerMetrics
    containerMetricsHistoryBetweenTimestamps(containerId: String!, from: Instant!, to: Instant!): [DockerContainerMetricsHistoryEntry!]!
    openDockerLogFileConnection(path: String! after: String, before: String, first: Int, last: Int): DockerLogMessageConnection!
}

type DockerLogLine {
    line: String!
}

type DockerLogLineEdge {
    node: DockerLogLine!
    cursor: String!
}

type DockerLogLineConnection {
    totalCount: Int!
    edges: [DockerLogLineEdge!]!
    pageInfo: PageInfo!
}


type DockerUnavailable{
    reason: String!
    isDisabled: Boolean
}

enum DockerContainerState {
    CREATED,
    RESTARTING,
    RUNNING,
    PAUSED,
    EXITED,
    DEAD,
    UNKNOWN
}

type DockerContainer {
    command: String!
    created: Long!
    hostConfig: DockerHostConfig!
    config: DockerConfig!
    id: String!
    image: String!
    imageID: String!
    mounts: [DockerMount!]!
    names: [String!]!
    networkSettings: [DockerNetworkSetting!]!
    ports: [DockerPort!]!
    state: DockerContainerState!
    health: DockerContainerHealth
    status: String!
}

type DockerContainerMetrics{
    cpuUsage: DockerContainerCpuUsage!
    memoryUsage: DockerContainerMemoryUsage!
    currentPid: Long!
    networkUsage: DockerContainerNetworkUsage!
    blockIOUsage: DockerContainerBlockIOUsage!
}

type DockerContainerMetricsHistoryEntry {
    timestamp: Instant!
    metrics: DockerContainerMetrics!
}

type DockerContainerCpuUsage{
    usagePercentPerCore: Float!
    usagePercentTotal: Float!
    throttlingData: DockerContainerThrottlingData!
}

type DockerContainerThrottlingData{
    periods: Long!
    throttledPeriods: Long!
    throttledTime: Long!
}

type DockerContainerNetworkUsage{
    bytesReceived: Long!
    bytesTransferred: Long!
}

type DockerContainerBlockIOUsage{
    bytesWritten: Long!
    bytesRead: Long!
}

type DockerContainerMemoryUsage{
    usageBytes: Long!
    usagePercent: Float!
    limitBytes: Long!
}

type DockerContainerHealth{
    status: String
    failingStreak: Int,
    logEntries: [DockerHealthLogEntry!]!
}

type DockerHealthLogEntry{
    start: String!
    end: String!
    output: String!
    exitCode: Long!
}

type DockerConfig{
    env: [String!]!
    volumeBindings: [DockerVolumeBinding!]!
    cmd: [String!]!
    exposedPorts: [DockerPortConfig!]!
}

type DockerPortConfig{
    port: Int!
    portProtocol: DockerPortProtocol!
}

type DockerVolumeBinding{
    hostPath: String!
    containerPath: String!
}

enum DockerPortProtocol {
    UDP,
    TCP,
    SCTP
}

type DockerNetworkSetting {
    name: String!
    network: DockerNetwork!
}

type DockerPort {
    ip: String!
    privatePort: Int!
    publicPort: Int!
    type: String!
}

type DockerNetwork {
    aliases: [String!]!
    endpointID: String!
    gateway: String!
    globalIPv6Address: String!
    globalIPv6PrefixLen: Int!
    iPAMConfig: DockerIpam!
    iPAddress: String!
    iPPrefixLen: Int!
    iPv6Gateway: String!
    links: [DockerLink!]!
    macAddress: String!
    networkID: String!
}

type DockerLink {
    name: String!,
    alias: String!
}

type DockerIpam {
    ipv4Address: String
    ipv6Address: String
}

type DockerMount {
    destination: String!,
    driver: String!,
    mode: String!,
    name: String!,
    propagation: String!,
    rw: Boolean!,
    source: String!
}

type DockerHostConfig {
    networkMode: String!
}

enum ContainerCommand {
    START,
    STOP,
    RESTART,
    PAUSE,
    UNPAUSE,
}

type DockerLogMessage {
    timestamp: Instant!
    level: DockerLogMessageLevel!
    message: String!
}

type DockerLogMessageEdge {
    cursor: String!
    node: DockerLogMessage!
}

type DockerLogMessageConnection {
    edges: [DockerLogMessageEdge!]!
    pageInfo: PageInfo!
}

enum DockerLogMessageLevel {
    TRACE, DEBUG, INFO, WARN, ERROR, FATAL, UNKNOWN
}