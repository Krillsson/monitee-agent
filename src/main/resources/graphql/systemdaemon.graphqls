extend type Query {
    systemDaemon: SystemDaemonAccess!
}

extend type Mutation {
    performSystemDaemonCommand(input: PerformSystemDaemonCommandInput) : PerformSystemDaemonCommandOutput
}

union SystemDaemonAccess = SystemDaemonAccessAvailable | SystemDaemonAccessUnavailable

type SystemDaemonAccessAvailable {
    services: [SystemDaemonService!]!
    openJournal(serviceName: String, limit: Int = -1): [SystemDaemonJournalEntry!]!
    serviceDetails(serviceName: String!): SystemDaemonServiceDetails
    openJournalConnection(serviceName: String! after: String, before: String, first: Int, last: Int): SystemDaemonJournalEntryConnection!
}

type SystemDaemonAccessUnavailable {
    reason: String!
}

type SystemDaemonService {
    active: String!
    description: String!
    load: String!
    sub: String!
    unit: String!
}

type SystemDaemonServiceDetails {
    active: String!
    description: String!
    load: String!
    sub: String!
    unit: String!
    activeEnterPreformattedTimeStamp: String
    activeExitPreformattedTimeStamp: String
    names: [String!]
    before: [String!]
    after: [String!]
    capabilities: [String!]
    fragmentPath: String
    statusText: String
    startedAt: String
    metrics: SystemDaemonServiceMetrics
    mainPid: Long
}

type SystemDaemonServiceMetrics {
    memoryCurrentBytes: Long
    cpuUsageNanoSeconds: Long
    ioReadBytes: Long
    ioWriteBytes: Long
}

type SystemDaemonJournalEntry {
    timestamp: Instant!
    level: SystemDaemonJournalEntryLevel!
    message: String!
}

enum SystemDaemonCommand {
    START,
    STOP,
    RELOAD,
    RESTART,
}

input PerformSystemDaemonCommandInput {
    serviceName: String!
    command: SystemDaemonCommand
}

type PerformSystemDaemonCommandOutputFailed {
    reason: String!
}

type PerformSystemDaemonCommandOutputSucceeded {
    serviceName: String!
}

union PerformSystemDaemonCommandOutput = PerformSystemDaemonCommandOutputSucceeded | PerformSystemDaemonCommandOutputFailed

type SystemDaemonJournalEntryEdge {
    cursor: String!
    node: SystemDaemonJournalEntry!
}

type SystemDaemonJournalEntryConnection {
    edges: [SystemDaemonJournalEntryEdge!]!
    pageInfo: PageInfo!
}

enum SystemDaemonJournalEntryLevel {
    TRACE, DEBUG, INFO, WARN, ERROR, FATAL, UNKNOWN
}