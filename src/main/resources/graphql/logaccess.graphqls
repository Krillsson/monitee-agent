extend type Query {
    logFiles: LogFilesAccess!
}

extend type Subscription {
    # Tail a log file at the given path
    # Use the after parameter to pass the cursor from openLogFileConnection
    # Read the log file using openLogFileConnection, up until hasNextPage is false
    # Then pass the endCursor into after here, this ensures no lines are skipped between read + tail
    # If no after is passed, only new lines will be returned
    tailLogFile(path: String! after: String): LogMessage!
}

type LogFilesAccess {
    files: [LogFile!]!
    openLogFile(path: String): [String!]!
    openLogFileConnection(path: String! after: String, before: String, first: Int, last: Int): LogMessageConnection!
}

type LogFile{
    name: String!
    path: String!
    sizeBytes: Long!
    createdAt: Instant
    updatedAt: Instant
    count: Int!
}

type LogMessage {
    timestamp: Instant
    level: LogMessageLevel!
    message: String!
}

type LogMessageEdge {
    cursor: String!
    node: LogMessage!
}

type LogMessageConnection {
    edges: [LogMessageEdge!]!
    pageInfo: PageInfo!
}

enum LogMessageLevel{
    TRACE, DEBUG, INFO, WARN, ERROR, FATAL, UNKNOWN
}
